user nginx;
worker_processes 4;
pid /run/nginx.pid;

# error_log /var/logs/error.log error;

worker_rlimit_nofile 8192;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
  include mime.types;
  index index.html
  default_type  text/plain;

  # client size
  client_max_body_size 10M;

  # gzip conf
  gzip             on;
  gzip_comp_level  2;
  gzip_min_length  20;
  gzip_proxied     expired no-cache no-store private auth;
  gzip_types       text/plain text/css text/csv application/javascript application/json;

  # don't send the nginx version number in error pages and Server header
  server_tokens off;

  # config to don't allow the browser to render the page inside an frame or iframe
  # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
  add_header X-Frame-Options SAMEORIGIN;

  # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
  # to disable content-type sniffing on some browsers.
  add_header X-Content-Type-Options nosniff;

  # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
  # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
  # this particular website if it was disabled by the user.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  add_header X-XSS-Protection "1; mode=block";

  # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
  # you can tell the browser that it can only download content from the domains you explicitly allow
  # add_header Content-Security-Policy "default-src 'self'; script-src 'self';

  server {
      listen 80 default_server;
      listen [::]:80 default_server;

      # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
      return 301 https://$host$request_uri;
  }

  server {
      listen 443 ssl http2;
      listen [::]:443 ssl http2;

      # http2 push
      # see https://www.nginx.com/blog/nginx-1-13-9-http2-server-push/
      http2_push_preload on;

      # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
      ssl_certificate /etc/nginx/ssl/selfsigned.crt;
      ssl_certificate_key /etc/nginx/ssl/selfsigned.key;
      ssl_session_timeout 1d;
      ssl_session_cache shared:SSL:50m;
      ssl_session_tickets off;
      ssl_dhparam  /etc/nginx/ssl/dhparam.pem;


      # modern configuration. tweak to your needs.
      ssl_protocols TLSv1.2;
      ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
      ssl_prefer_server_ciphers on;

      # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
      add_header Strict-Transport-Security max-age=15768000;

      # OCSP Stapling ---
      # fetch OCSP records from URL in ssl_certificate and cache them
      # ssl_stapling on;
      # ssl_stapling_verify on;

      ## verify chain of trust of OCSP response using Root CA and Intermediate certs
      ssl_trusted_certificate /etc/nginx/ssl/selfsigned.crt;

      resolver 8.8.8.8;

      root /var/www;

      include /etc/nginx/includes/proxy.conf;

      location / {
        index index.html;
        # try_files $uri /index.html;
      }
    }
}
